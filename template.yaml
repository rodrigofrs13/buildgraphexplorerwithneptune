AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to automatically provision AWS Neptune and Graph Explorer in ECS.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Tags"
        Parameters:
          - Env
          - AppName

      -
        Label:
          default: "Neptune Database Parameters"
        Parameters:
          - DBInstanceClass
          - DBClusterIdentifier
          - MajorVersionUpgrade
          - MinorVersionUpgrade
          - NeptuneQueryTimeout
          - StorageEncrypted
          - NeptuneDBSubnetGroupName
          - GremlinRequestsPerSecThreshold
          - SparqlRequestsPerSecThreshold
          - IAMAuthEnabled

      -
        Label:
          default: "Neptune Network Parameters"
        Parameters:
          - Port
          - VpcId
          - SubnetIDs
          - SourceCIDR
      -
        Label:
          default: "Neptune Backup and Monitoring Parameters"
        Parameters:
          - HighCpuAlarmThreshold
          - LowMemoryAlarmThreshold
          - UploadAuditLogs
          - NeptuneEnableAuditLog
          - BackupRetentionPeriod
          - NeptuneDBClusterPreferredMaintenanceWindow
          - NeptuneDBInstancePreferredMaintenanceWindow
          - NeptuneDBClusterPreferredBackupWindow
      -
        Label:
          default: "Neptune Notifications Parameters"
        Parameters:
          - NeptuneSNSTopicArn
          - SNSEmailSubscription

      -
        Label:
          default: "Cluster ECS for Graph Explorer"
        Parameters:
          - InstanceType
          - DesiredCapacity  
          - MaxSize        


Parameters:

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    Description: Class of EC2 instance used to host containers. Choose t2 for testing, m5 for general purpose, c5 for CPU intensive services, and r5 for memory intensive services
    AllowedValues: [ t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
     m5.large, m5.xlarge, m5.2large, m5.4xlarge, m5.12xlarge, m5.24large,
     c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
     r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge ]
    ConstraintDescription: Please choose a valid instance type.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
    Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI



# Enviornment type
  Env:
    Description:    Please specify the target Environment. Used for tagging and resource names. Mandatory LOWER CASE.
    Type:           String
    Default:        "dev"
    AllowedValues:
      - test
      - dev
      - prod

# Application Name
  AppName:
    Description:    Please specify the Application Name. Used for tagging and resource names. Mandatory LOWER CASE.
    Type:           String
    Default:        "appname"


  # Supported Neptune DB instance class
  DBInstanceClass:
    Description:    Neptune DB instance class that will be used for primary and all replicas
    Type:           String
    Default:        db.t3.medium
    AllowedValues:
    - db.t3.medium
    - db.r4.large
    - db.r4.xlarge
    - db.r4.2xlarge
    - db.r4.4xlarge
    - db.r4.8xlarge

  # Neptune DB cluster identifier
  DBClusterIdentifier:
    Description:    Neptune DB cluster identifier. Must contain from 1 to 63 alphanumeric characters or hyphens.
                    First character must be a letter. Cannot end with a hyphen or contain two consecutive hyphens.
    Type:           String
    Default: "dbinstance"

  # Neptune DB instance identifier
#  DBInstanceIdentifier:
#    Description:   Neptune DB instance identifier. This is the unique key that identifies a DB instance.
#                   This parameter is stored as a lowercase string (e.g. mydbinstance).
#    Type:          String

  # Port used to connect to the Neptune cluster
  Port:
   Description:     Port used to connect to the Neptune cluster. Must be a valid port number between
   Type:            String
   Default:         8182


  #NetWork
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select your VPC

  SubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select two private subnets

  SourceCIDR:
    Description: Source VPC CIDR
    Type: String
    Default: 0.0.0.0/0

  # Neptune DB parameter group query timeout
  NeptuneQueryTimeout:
    Description:    Neptune DB parameters. Allowed values "10-2147483647"
    Type:           String
    Default:        120000

  # Data at rest encryption
  StorageEncrypted:
    Description:    Data-at-rest encryption
    Type:           String
    Default:        false
    AllowedValues:
      - true
      - false

  # Neptune DB Subnet Group Name
  NeptuneDBSubnetGroupName:
    Description:    The name for the DB Subnet Group. This value is stored as a lowercase string.
                    Constraints, Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens.
                    Must not be default.
    Type:           String
    Default: "dbgroup"

  # Custom SNS topic alarm
  NeptuneSNSTopicArn:
    Description:    Custom SNS topic alarm. Optional. If not provided, an new SNS topic will be created for you
    Type:           String

  # SNS Email subscription
  SNSEmailSubscription:
    Description:    SNS Email subscription. Optional. If not provided, no alarm subscriptions will be created
    Type:           String
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$|^$"
    Default: root@root.com

  # High CPU alarm threshold
  HighCpuAlarmThreshold:
    Description:    High CPU alarm threshold. Alert when CPU goes above this value.  In percentage used
    Type:           String
    AllowedPattern: (100|[1-9]?[0-9])$
    Default:        80

  # Low memory alarm threshold
  LowMemoryAlarmThreshold:
    Description:    Low memory alarm threshold. Alert when memory falls below this value.  In bytes
    Type:           Number
    Default:        700000000

  # Gremlin Requests Per Sec alarm threshold
  GremlinRequestsPerSecThreshold:
    Description:    Gremlin Requests Per Sec alarm threshold. Alert when Gremlin Requests Per Sec goes above this value.
                    In percentage used
    Type:           String
    Default:        10000

  # Sparql Requests Per Sec alarm threshold
  SparqlRequestsPerSecThreshold:
    Description:    Sparql Requests Per Sec alarm threshold. Alert when Sparql Requests Per Sec goes above this value.
                    In percentage used
    Type:           String
    Default:        10000

  # Enable upload of audit logs?
  UploadAuditLogs:
    Description:    Enable upload of audit logs?
    Type:           String
    Default:        Yes
    AllowedValues:
      - Yes
      - No

  # Neptune DB audit logs
  NeptuneEnableAuditLog:
    Description:    Neptune DB parameters. Allowed values "0, 1"
    Type:           String
    Default:        0
    AllowedValues:
      - 0
      - 1

  # Backup retention period (in days)
  BackupRetentionPeriod:
    Description:    Backup retention period (in days).  Must be between 1 - 35
    Type:           String
    AllowedPattern: ([1-9]|[12][0-9]|3[0-5])
    Default:        1

  # Neptune DB cluster maintenace window
  NeptuneDBClusterPreferredMaintenanceWindow:
    Description:    Neptune DB cluster preferred maintenance window. Format - ddd:hh24:mi-ddd:hh24:mi.
                    Valid Days - Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints - Minimum 30-minute window.
    Type:           String
    Default:        mon:03:00-mon:04:00

  # Neptune DB instance maintenace window
  NeptuneDBInstancePreferredMaintenanceWindow:
    Description:    Neptune DB instance preferred maintenance window. Format - ddd:hh24:mi-ddd:hh24:mi.
                    Valid Days - Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints - Minimum 30-minute window.
    Type:           String
    Default:        mon:03:00-mon:04:00

  # Neptune DB cluster backup window
  NeptuneDBClusterPreferredBackupWindow:
    Description:    Neptune DB cluster preferred backup window. Constrains - Must be in the format hh24:mi-hh24:mi.
                    Must be in Universal Coordinated Time (UTC). Must not conflict with the preferred maintenance window.
                    Must be at least 30 minutes.
    Type:           String
    Default:        02:00-03:00

  # Maintenance - Major version upgrade
  MajorVersionUpgrade:
    Description:    Neptune DB major version upgrade
    Type:           String
    Default:        true
    AllowedValues:
      - true
      - false

  # Maintenance - Minor version upgrade
  MinorVersionUpgrade:
    Description:    Neptune DB minor version upgrade
    Type:           String
    Default:        true
    AllowedValues:
      - true
      - false

  # Enable IAM Neptune DB authentication
  IAMAuthEnabled:
    Description:    Neptune DB IAM authentication
    Type:           String
    Default:        false
    AllowedValues:
      - true
      - false

Conditions:
  # Enable audit log uploads to CloudWatch Logs?
  EnableAuditLogUpload: !Equals [ !Ref UploadAuditLogs, Yes ]

  # Create an SNS topic?
  CreateSnsTopic: !Equals [ !Ref NeptuneSNSTopicArn, "" ]

  # Create an SNS subscription?
  CreateSnsSubscription: !Not [ !Equals [!Ref SNSEmailSubscription, "" ] ]


Resources:

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-graph-explorer-cluster' 


  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SourceCIDR


  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIDs
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']


  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-service-autoscaling'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-ecs-service'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-ecs-service'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-graph-explorer-log'



  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: graph-explorer
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-graph-explorer'
          Image: public.ecr.aws/neptune/graph-explorer:latest
          Environment:
            - Name: "HOST"
              Value: "localhost"
          Essential: true    
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
              AppProtocol: http
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
              AppProtocol: http    
              
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - EC2

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      ServiceName: !Sub '${AWS::StackName}-graph-explorer'
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - TargetGroupArn:
            Ref: TargetGroup
          ContainerPort: 80
          ContainerName: !Sub '${AWS::StackName}-graph-explorer'
       

  # ECS Load Balancer
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Subnets:
        - !Select [ "0", !Ref SubnetIDs]
        - !Select [ "1", !Ref SubnetIDs]
      Type: application
      SecurityGroups:
        - !GetAtt ALBSG.GroupId

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AWS::StackName}-TargetGroup'
      VpcId: !Ref VpcId
      Protocol: HTTPS
      HealthCheckEnabled: true
      HealthCheckPort: 443
      HealthCheckPath: /explorer
      HealthCheckProtocol: HTTPS
      IpAddressType: ipv4
      Port: 443
      Matcher:
        HttpCode: 200-499

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the ALB
      GroupName: !Sub '${AWS::StackName}-ALBSG'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
        

  
  ## Neptune          

  NeptuneDBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG of Neptune DB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 8182
          ToPort: 8182
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 8182
          ToPort: 8182
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
      Tags:
        - Key:    Name
          Value:  !Sub '${AWS::StackName}-neptune-sg'

### Neptune DB setup ###

  # Neptune DB Cluster
  NeptuneDBCluster:
    Type: "AWS::Neptune::DBCluster"
    DependsOn: NeptuneDBSG
    Properties:
#      AvailabilityZones: !GetAZs ''
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      DBClusterIdentifier: !Ref DBClusterIdentifier
      DBClusterParameterGroupName: !Ref NeptuneDBClusterParameterGroup
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      IamAuthEnabled: !Ref IAMAuthEnabled
      Port: !Ref Port
      PreferredBackupWindow: !Ref NeptuneDBClusterPreferredBackupWindow
      PreferredMaintenanceWindow: !Ref NeptuneDBClusterPreferredMaintenanceWindow
      StorageEncrypted: !Ref StorageEncrypted
      VpcSecurityGroupIds:
        - !Ref 'NeptuneDBSG'
      Tags:
        - Key:    Name
          Value:  !Sub '${Env}-${AppName}-Cluster'
        - Key:    App
          Value:  !Sub '${AppName}'
        - Key:    Env
          Value:  !Sub '${Env}'


  # Neptune DB instance
  NeptuneDBInstance:
    Type: "AWS::Neptune::DBInstance"
    Properties:
      AllowMajorVersionUpgrade: !Ref MajorVersionUpgrade
      AutoMinorVersionUpgrade: !Ref MinorVersionUpgrade
      DBClusterIdentifier: !Ref NeptuneDBCluster #Note: If you specify this property, the default deletion policy is Delete. Otherwise, the default deletion policy is Snapshot.
      DBInstanceClass: !Ref DBInstanceClass
#      DBInstanceIdentifier: !Ref DBInstanceIdentifier #Note: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
      DBParameterGroupName: default.neptune1.2 #!Ref NeptuneDBParameterGroup
#      DBSnapshotIdentifier: # Enable for the DB cluster snapshot from which you want to restore
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      PreferredMaintenanceWindow: !Ref NeptuneDBInstancePreferredMaintenanceWindow
      Tags:
        - Key:    Name
          Value:  !Sub '${Env}-${AppName}-Instance'
        - Key:    App
          Value:  !Sub '${AppName}'
        - Key:    Env
          Value:  !Sub '${Env}'


  # Neptune DB cluster parameter group
  NeptuneDBClusterParameterGroup:
    Type: "AWS::Neptune::DBClusterParameterGroup"
    Properties:
      Description: !Sub "CloudFormation managed Neptune DB Cluster Parameter Group - ${Env}-${AppName}-cluster-parameter-group"
      Parameters:
        neptune_enable_audit_log: !If [ EnableAuditLogUpload, 1, 0]
      Family : neptune1.2
      Name : !Sub ${Env}-${AppName}-neptune-cluster-parameter-group
      Tags:
        - Key:    Name
          Value:  !Sub '${Env}-${AppName}-cluster-parameter-group'
        - Key:    App
          Value:  !Sub '${AppName}'
        - Key:    Env
          Value:  !Sub '${Env}'


  # Neptune DB parameter group
  NeptuneDBParameterGroup:
    Type: "AWS::Neptune::DBParameterGroup"
    Properties:
      Description: !Sub "CloudFormation managed Neptune DB Parameter Group - ${Env}-${AppName}-parameter-group"
      Parameters:
        neptune_query_timeout: !Ref NeptuneQueryTimeout
      Family : neptune1.2
      Name : !Sub ${Env}-${AppName}-parameter-group
      Tags:
        - Key:    Name
          Value:  !Sub '${Env}-${AppName}-parameter-group'
        - Key:    App
          Value:  !Sub '${AppName}'
        - Key:    Env
          Value:  !Sub '${Env}'


  # Neptune DB subnet group
  NeptuneDBSubnetGroup:
    Type: "AWS::Neptune::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "CloudFormation managed Neptune DB Subnet Group - ${Env}-${AppName}-subnet-group"
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroupName
      SubnetIds:
        - !Select [ "0", !Ref SubnetIDs]
        - !Select [ "1", !Ref SubnetIDs]
      Tags:
        - Key:    Name
          Value:  !Sub '${Env}-${AppName}-subnet-group'
        - Key:    App
          Value:  !Sub '${AppName}'
        - Key:    Env
          Value:  !Sub '${Env}'


### SNS Topic setup ###

  # Optional SNS topic for alarms
  NeptuneAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: CreateSnsTopic
    Properties:
      DisplayName: !Sub ${AWS::StackName} alarm topic

  # Optional SNS subscription for alarms
  NeptuneAlarmSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateSnsSubscription
    Properties:
      Endpoint: !Ref SNSEmailSubscription
      Protocol: email
      TopicArn: !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]

### IAM Role ###

  # Neptune IAM role - allows access to CloudWatch Logs and S3
  NeptuneRole:
    Type: AWS::IAM::Role
    Condition: EnableAuditLogUpload
    Properties:
      RoleName:   !Sub '${Env}-${AppName}-neptune-iam-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - monitoring.rds.amazonaws.com
            - rds.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref NeptuneCloudWatchPolicy
        - !Ref NeptuneS3Policy

  # Neptune CloudWatch policy
  NeptuneCloudWatchPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Default policy for CloudWatch logs
      ManagedPolicyName: !Sub "${Env}-${AppName}-neptune-cw-policy-${AWS::Region}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "EnableLogGroups"
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:PutRetentionPolicy
            Resource:
              - !Sub arn:${AWS::Partition}:logs:*:*:log-group:/aws/neptune/*
          - Sid: "EnableLogStreams"
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescriptLogStreams
            - logs:GetLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:*:*:log-group:/aws/neptune/*:log-stream:*

  # Neptune S3 policy for acess to the data sets
  NeptuneS3Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Neptune default policy for S3 access for data load
      ManagedPolicyName: !Sub "${Env}-${AppName}-neptune-s3-policy-${AWS::Region}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowNeptuneAccessToS3"
            Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Sub 'arn:aws:s3:::*' # S3 Bucket needs to be added here

### CloudWatch Alarms setup ###

  # Neptune DB Primary Instance - CPU alarm
  NeptunePrimaryCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub ${Env}-${AppName} primary DB CPU over ${HighCpuAlarmThreshold}%
      Namespace: AWS/Neptune
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighCpuAlarmThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref NeptuneDBCluster
      AlarmActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]
      InsufficientDataActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]

  # Neptune DB Primary Instance - memory alarm
  NeptunePrimaryMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub ${Env}-${AppName} primary DB memory under ${LowMemoryAlarmThreshold} bytes
      Namespace: AWS/Neptune
      MetricName: FreeableMemory
      Unit: Bytes
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref LowMemoryAlarmThreshold
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref NeptuneDBCluster
      AlarmActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]
      InsufficientDataActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]

  # Neptune DB Primary Instance - Gremlin Requests Per Second alarm
  NeptunePrimaryGremlinRequestsPerSecAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub ${Env}-${AppName} primary DB Gremlin Requests Per Second
      Namespace: AWS/Neptune
      MetricName: GremlinRequestsPerSec
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref GremlinRequestsPerSecThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: DBClusterIdentifier
        Value: gremlin-cluster
      AlarmActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]
      InsufficientDataActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]

  # Neptune DB Primary Instance - Sparql Requests Per Second alarm
  NeptunePrimarySparqlRequestsPerSecAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub ${Env}-${AppName} primary DB Sparql Requests Per Second
      Namespace: AWS/Neptune
      MetricName: SparqlRequestsPerSec
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref SparqlRequestsPerSecThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref NeptuneDBCluster
      AlarmActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]
      InsufficientDataActions:
      - !If [ CreateSnsTopic, !Ref NeptuneAlarmTopic, !Ref NeptuneSNSTopicArn ]

Outputs:

  NeptuneEndpointAddress:
    Description:  Neptune DB endpoint address
    Value:        !GetAtt NeptuneDBCluster.Endpoint

  NeptuneReadEndpointAddress:
    Description:  Neptune DB read-only endpoint address
    Value:        !GetAtt NeptuneDBCluster.ReadEndpoint

  NeptuneEndpointPort:
    Description:  Endpoint port
    Value:        !GetAtt NeptuneDBCluster.Port

  LoadBalancers:  
    Description:  the URL endpoint HTTP
    Value: !Sub 
      - '${Endpoint}'
      - Endpoint: !GetAtt ALB.DNSName
